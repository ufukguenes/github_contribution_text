import os
import calendar
import numpy as np

def text_to_4_char_matrix(text: str, matrix_width: int) -> list[list[int]]:
    character_patterns = {
        'A': [[0,1,1,0], [1,0,0,1], [1,0,0,1], [1,1,1,1], [1,0,0,1], [1,0,0,1], [1,0,0,1]],
        'B': [[1,1,1,0], [1,0,0,1], [1,0,0,1], [1,1,1,0], [1,0,0,1], [1,0,0,1], [1,1,1,0]],
        'C': [[0,1,1,1], [1,0,0,0], [1,0,0,0], [1,0,0,0], [1,0,0,0], [1,0,0,0], [0,1,1,1]],
        'D': [[1,1,1,0], [1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1], [1,1,1,0]],
        'E': [[1,1,1,1], [1,0,0,0], [1,0,0,0], [1,1,1,0], [1,0,0,0], [1,0,0,0], [1,1,1,1]],
        'F': [[1,1,1,1], [1,0,0,0], [1,0,0,0], [1,1,1,0], [1,0,0,0], [1,0,0,0], [1,0,0,0]],
        'G': [[0,1,1,1], [1,0,0,0], [1,0,0,0], [1,0,1,1], [1,0,0,1], [1,0,0,1], [0,1,1,0]],
        'H': [[1,0,0,1], [1,0,0,1], [1,0,0,1], [1,1,1,1], [1,0,0,1], [1,0,0,1], [1,0,0,1]],
        'I': [[1,1,1,1], [0,0,1,0], [0,0,1,0], [0,0,1,0], [0,0,1,0], [0,0,1,0], [1,1,1,1]],
        'J': [[0,0,0,1], [0,0,0,1], [0,0,0,1], [0,0,0,1], [1,0,0,1], [1,0,0,1], [0,1,1,0]],
        'K': [[1,0,0,1], [1,0,1,0], [1,0,1,0], [1,1,0,0], [1,0,1,0], [1,0,1,0], [1,0,0,1]],
        'L': [[1,0,0,0], [1,0,0,0], [1,0,0,0], [1,0,0,0], [1,0,0,0], [1,0,0,0], [1,1,1,1]],
        'M': [[1,0,0,1], [1,1,1,1], [1,1,1,1], [1,0,1,1], [1,0,0,1], [1,0,0,1], [1,0,0,1]],
        'N': [[1,0,0,1], [1,0,1,1], [1,0,1,1], [1,1,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1]],
        'O': [[0,1,1,0], [1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1], [0,1,1,0]],
        'P': [[1,1,1,0], [1,0,0,1], [1,0,0,1], [1,1,1,0], [1,0,0,0], [1,0,0,0], [1,0,0,0]],
        'Q': [[0,1,1,0], [1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1], [0,1,1,0], [0,0,0,1]],
        'R': [[1,1,1,0], [1,0,0,1], [1,0,0,1], [1,1,1,0], [1,0,1,0], [1,0,0,1], [1,0,0,1]],
        'S': [[0,1,1,1], [1,0,0,0], [1,0,0,0], [0,1,1,0], [0,0,0,1], [0,0,0,1], [1,1,1,0]],
        'T': [[1,1,1,1], [0,0,1,0], [0,0,1,0], [0,0,1,0], [0,0,1,0], [0,0,1,0], [0,0,1,0]],
        'U': [[1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1], [0,1,1,0]],
        'V': [[1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1], [0,1,1,0], [0,0,1,0]],
        'W': [[1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,1,1], [1,1,0,1], [1,0,1,1], [0,1,1,0]],
        'X': [[1,0,0,1], [1,0,0,1], [0,1,1,0], [0,1,0,0], [0,1,1,0], [1,0,0,1], [1,0,0,1]],
        'Y': [[1,0,0,1], [1,0,0,1], [1,0,0,1], [0,1,1,0], [0,0,1,0], [0,0,1,0], [0,0,1,0]],
        'Z': [[1,1,1,1], [0,0,1,0], [0,1,0,0], [0,1,0,0], [1,0,0,0], [1,0,0,0], [1,1,1,1]],
        '0': [[0,1,1,0], [1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1], [0,1,1,0]],
        '1': [[0,0,1,0], [0,1,1,0], [0,0,1,0], [0,0,1,0], [0,0,1,0], [0,0,1,0], [1,1,1,1]],
        '2': [[0,1,1,0], [1,0,0,1], [0,0,0,1], [0,0,1,0], [0,0,1,0], [0,1,0,0], [1,1,1,1]],
        '3': [[1,1,1,1], [0,0,0,1], [0,0,0,1], [0,1,1,1], [0,0,0,1], [0,0,0,1], [1,1,1,1]],
        '4': [[1,0,0,0], [1,0,1,0], [1,0,1,0], [1,1,1,1], [0,0,1,0], [0,0,1,0], [0,0,1,0]],
        '5': [[1,1,1,1], [1,0,0,0], [1,0,0,0], [1,1,1,0], [0,0,0,1], [0,0,0,1], [1,1,1,0]],
        '6': [[0,1,1,0], [1,0,0,0], [1,0,0,0], [1,1,1,0], [1,0,0,1], [1,0,0,1], [0,1,1,0]],
        '7': [[1,1,1,1], [0,0,0,1], [0,0,0,1], [0,0,1,0], [0,1,0,0], [0,1,0,0], [0,1,0,0]],
        '8': [[0,1,1,0], [1,0,0,1], [1,0,0,1], [0,1,1,0], [1,0,0,1], [1,0,0,1], [0,1,1,0]],
        '9': [[0,1,1,0], [1,0,0,1], [1,0,0,1], [0,1,1,1], [0,0,0,1], [0,0,0,1], [0,1,1,0]],
        ' ': [[0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0]],
    }

    return create_matrix_fixed_size(character_patterns, text, matrix_width)

def text_to_5_char_matrix(text: str, matrix_width: int) -> list[list[int]]:
    character_patterns = {
        'A': [[0,1,1,1,0], [1,0,0,0,1], [1,0,0,0,1], [1,1,1,1,1], [1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1]],
        'B': [[1,1,1,1,0], [1,0,0,0,1], [1,0,0,0,1], [1,1,1,1,0], [1,0,0,0,1], [1,0,0,0,1], [1,1,1,1,0]],
        'C': [[0,1,1,1,1], [1,0,0,0,0], [1,0,0,0,0], [1,0,0,0,0], [1,0,0,0,0], [1,0,0,0,0], [0,1,1,1,1]],
        'D': [[1,1,1,1,0], [1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1], [1,1,1,1,0]],
        'E': [[1,1,1,1,1], [1,0,0,0,0], [1,0,0,0,0], [1,1,1,1,0], [1,0,0,0,0], [1,0,0,0,0], [1,1,1,1,1]],
        'F': [[1,1,1,1,1], [1,0,0,0,0], [1,0,0,0,0], [1,1,1,1,0], [1,0,0,0,0], [1,0,0,0,0], [1,0,0,0,0]],
        'G': [[0,1,1,1,1], [1,0,0,0,0], [1,0,0,0,0], [1,0,1,1,1], [1,0,0,0,1], [1,0,0,0,1], [0,1,1,1,0]],
        'H': [[1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1], [1,1,1,1,1], [1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1]],
        'I': [[1,1,1,1,1], [0,0,1,0,0], [0,0,1,0,0], [0,0,1,0,0], [0,0,1,0,0], [0,0,1,0,0], [1,1,1,1,1]],
        'J': [[0,0,0,0,1], [0,0,0,0,1], [0,0,0,0,1], [0,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1], [0,1,1,1,0]],
        'K': [[1,0,0,0,1], [1,0,0,1,0], [1,0,1,0,0], [1,1,0,0,0], [1,0,1,0,0], [1,0,0,1,0], [1,0,0,0,1]],
        'L': [[1,0,0,0,0], [1,0,0,0,0], [1,0,0,0,0], [1,0,0,0,0], [1,0,0,0,0], [1,0,0,0,0], [1,1,1,1,1]],
        'M': [[1,0,0,0,1], [1,1,0,1,1], [1,0,1,0,1], [1,0,1,0,1], [1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1]],
        'N': [[1,0,0,0,1], [1,1,0,0,1], [1,0,1,0,1], [1,0,0,1,1], [1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1]],
        'O': [[0,1,1,1,0], [1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1], [0,1,1,1,0]],
        'P': [[1,1,1,1,0], [1,0,0,0,1], [1,0,0,0,1], [1,1,1,1,0], [1,0,0,0,0], [1,0,0,0,0], [1,0,0,0,0]],
        'Q': [[0,1,1,1,0], [1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1], [0,1,1,1,0], [0,0,0,0,1]],
        'R': [[1,1,1,1,0], [1,0,0,0,1], [1,0,0,0,1], [1,1,1,1,0], [1,0,1,0,0], [1,0,0,1,0], [1,0,0,0,1]],
        'S': [[0,1,1,1,1], [1,0,0,0,0], [1,0,0,0,0], [0,1,1,1,0], [0,0,0,0,1], [0,0,0,0,1], [1,1,1,1,0]],
        'T': [[1,1,1,1,1], [0,0,1,0,0], [0,0,1,0,0], [0,0,1,0,0], [0,0,1,0,0], [0,0,1,0,0], [0,0,1,0,0]],
        'U': [[1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1], [0,1,1,1,0]],
        'V': [[1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1], [0,1,0,1,0], [0,0,1,0,0]],
        'W': [[1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1], [1,0,1,0,1], [1,0,1,0,1], [1,1,0,1,1], [0,1,1,1,0]],
        'X': [[1,0,0,0,1], [0,1,0,1,0], [0,0,1,0,0], [0,0,1,0,0], [0,0,1,0,0], [0,1,0,1,0], [1,0,0,0,1]],
        'Y': [[1,0,0,0,1], [0,1,0,1,0], [0,0,1,0,0], [0,0,1,0,0], [0,0,1,0,0], [0,0,1,0,0], [0,0,1,0,0]],
        'Z': [[1,1,1,1,1], [0,0,0,1,0], [0,0,1,0,0], [0,1,0,0,0], [1,0,0,0,0], [1,0,0,0,0], [1,1,1,1,1]],
        '0': [[0,1,1,1,0], [1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1], [0,1,1,1,0]],
        '1': [[0,0,1,0,0], [0,1,1,0,0], [0,0,1,0,0], [0,0,1,0,0], [0,0,1,0,0], [0,0,1,0,0], [1,1,1,1,1]],
        '2': [[0,1,1,1,0], [1,0,0,0,1], [0,0,0,0,1], [0,0,0,1,0], [0,0,1,0,0], [0,1,0,0,0], [1,1,1,1,1]],
        '3': [[1,1,1,1,1], [0,0,0,0,1], [0,0,0,0,1], [0,1,1,1,1], [0,0,0,0,1], [0,0,0,0,1], [1,1,1,1,1]],
        '4': [[0,0,0,1,0], [0,0,1,1,0], [0,1,0,1,0], [1,0,0,1,0], [1,1,1,1,1], [0,0,0,1,0], [0,0,0,1,0]],
        '5': [[1,1,1,1,1], [1,0,0,0,0], [1,0,0,0,0], [1,1,1,1,0], [0,0,0,0,1], [0,0,0,0,1], [1,1,1,1,0]],
        '6': [[0,1,1,1,0], [1,0,0,0,0], [1,0,0,0,0], [1,1,1,1,0], [1,0,0,0,1], [1,0,0,0,1], [0,1,1,1,0]],
        '7': [[1,1,1,1,1], [0,0,0,0,1], [0,0,0,0,1], [0,0,0,1,0], [0,0,1,0,0], [0,1,0,0,0], [1,0,0,0,0]],
        '8': [[0,1,1,1,0], [1,0,0,0,1], [1,0,0,0,1], [0,1,1,1,0], [1,0,0,0,1], [1,0,0,0,1], [0,1,1,1,0]],
        '9': [[0,1,1,1,0], [1,0,0,0,1], [1,0,0,0,1], [0,1,1,1,1], [0,0,0,0,1], [0,0,0,0,1], [0,1,1,1,0]],
        ' ': [[0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0]],
    }

    return create_matrix_fixed_size(character_patterns, text, matrix_width)

def create_matrix_fixed_size(character_patterns: dict[str, list[list[int]]], text: str, matrix_width: int):
    matrix_height = len(character_patterns["A"])
    character_width = len(character_patterns["A"][0])
    final_matrix = [[0 for _ in range(matrix_width)] for _ in range(matrix_height)]

    max_chars = matrix_width // character_width

    processed_text = text.upper()
    if len(processed_text) > max_chars:
        processed_text = processed_text[:max_chars]
    else:
        processed_text = processed_text.ljust(max_chars, ' ')

    current_col = 0
    for char in processed_text:
        pattern = character_patterns.get(char, character_patterns[' '])

        for row_idx in range(matrix_height):
            for col_offset in range(character_width):
                if current_col + col_offset < matrix_width:
                    final_matrix[row_idx][current_col + col_offset] = pattern[row_idx][col_offset]
        current_col += character_width + 1

    return final_matrix


def text_to_variable_char_matrix(text: str, matrix_width: int) -> list[list[int]]:
    character_patterns = {
        'A': [[0,1,0], [1,0,1], [1,0,1], [1,1,1], [1,0,1], [1,0,1], [1,0,1]],
        'B': [[1,1,1,0], [1,0,0,1], [1,0,0,1], [1,1,1,0], [1,0,0,1], [1,0,0,1], [1,1,1,0]],
        'C': [[0,1,1], [1,0,0], [1,0,0], [1,0,0], [1,0,0], [1,0,0], [0,1,1]],
        'D': [[1,1,1,0], [1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1], [1,1,1,0]],
        'E': [[1,1,1], [1,0,0], [1,0,0], [1,1,0], [1,0,0], [1,0,0], [1,1,1]],
        'F': [[1,1,1], [1,0,0], [1,0,0], [1,1,0], [1,0,0], [1,0,0], [1,0,0]],
        'G': [[0,1,1,1], [1,0,0,0], [1,0,0,0], [1,0,1,1], [1,0,0,1], [1,0,0,1], [0,1,1,0]],
        'H': [[1,0,1], [1,0,1], [1,0,1], [1,1,1], [1,0,1], [1,0,1], [1,0,1]],
        'I': [[1], [0], [1], [1], [1], [1], [1]],
        'J': [[0,0,0,1], [0,0,0,1], [0,0,0,1], [0,0,0,1], [1,0,0,1], [1,0,0,1], [0,1,1,0]],
        'K': [[1,0,0,1], [1,0,1,0], [1,0,1,0], [1,1,0,0], [1,0,1,0], [1,0,1,0], [1,0,0,1]],
        'L': [[1,0,0,0], [1,0,0,0], [1,0,0,0], [1,0,0,0], [1,0,0,0], [1,0,0,0], [1,1,1,1]],
        'M': [[1,0,0,0,1], [1,1,0,1,1], [1,0,1,0,1], [1,0,1,0,1], [1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1]],
        'N': [[1,0,0,0,1], [1,1,0,0,1], [1,0,1,0,1], [1,0,0,1,1], [1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1]],
        'O': [[0,1,1,0], [1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1], [0,1,1,0]],
        'P': [[1,1,0], [1,0,1], [1,0,1], [1,1,0], [1,0,0], [1,0,0], [1,0,0]],
        'Q': [[0,1,1,0], [1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1], [0,1,1,0], [0,0,0,1]],
        'R': [[1,1,1,0], [1,0,0,1], [1,0,0,1], [1,1,1,0], [1,0,1,0], [1,0,0,1], [1,0,0,1]],
        'S': [[0,1,1], [1,0,0], [1,0,0], [0,1,0], [0,0,1], [0,0,1], [1,1,0]],
        'T': [[1,1,1], [0,1,0], [0,1,0], [0,1,0], [0,1,0], [0,1,0], [0,1,0]],
        'U': [[1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1], [0,1,1,0]],
        'V': [[1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1], [0,1,1,0], [0,0,1,0]],
        'W': [[1,0,0,0,1], [1,0,0,0,1], [1,0,0,0,1], [1,0,1,0,1], [1,0,1,0,1], [1,1,0,1,1], [0,1,1,1,0]],
        'X': [[1,0,0,1], [1,0,0,1], [0,1,1,0], [0,1,0,0], [0,1,1,0], [1,0,0,1], [1,0,0,1]],
        'Y': [[1,0,0,1], [1,0,0,1], [1,0,0,1], [0,1,1,0], [0,0,1,0], [0,0,1,0], [0,0,1,0]],
        'Z': [[1,1,1], [0,0,1], [0,1,0], [0,1,0], [1,0,0], [1,0,0], [1,1,1]],
        '0': [[0,1,1,0], [1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1], [1,0,0,1], [0,1,1,0]],
        '1': [[0,1,0], [1,1,0], [0,1,0], [0,1,0], [0,1,0], [0,1,0], [1,1,1]],
        '2': [[0,1,0], [1,0,1], [0,0,1], [0,1,0], [0,1,0], [1,0,0], [1,1,1]],
        '3': [[1,1,1], [0,0,1], [0,0,1], [0,1,1], [0,0,1], [0,0,1], [1,1,1]],
        '4': [[1,0,0], [1,0,1], [1,0,1], [1,1,1], [0,0,1], [0,0,1], [0,0,1]],
        '5': [[1,1,1], [1,0,0], [1,0,0], [1,1,1], [0,0,1], [0,0,1], [1,1,1]],
        '6': [[1,1,1], [1,0,0], [1,0,0], [1,1,1], [1,0,1], [1,0,1], [1,1,1]],
        '7': [[1,1,1,1], [0,0,0,1], [0,0,0,1], [0,0,1,0], [0,1,0,0], [0,1,0,0], [0,1,0,0]],
        '8': [[0,1,1,0], [1,0,0,1], [1,0,0,1], [0,1,1,0], [1,0,0,1], [1,0,0,1], [0,1,1,0]],
        '9': [[0,1,1,0], [1,0,0,1], [1,0,0,1], [0,1,1,1], [0,0,0,1], [0,0,0,1], [0,1,1,0]],
        ' ': [[0], [0], [0], [0], [0], [0], [0]],
    }

    processed_text = text.upper()
    matrix_height = 7

    final_matrix = np.zeros((matrix_height, 0), dtype=int)

    for char in processed_text:
        pattern = character_patterns.get(char, character_patterns[' '])
        final_matrix = np.concatenate((final_matrix, pattern), axis=1)
        final_matrix = np.concatenate((final_matrix, character_patterns[' ']), axis=1)

    final_matrix = final_matrix[:, :matrix_width].tolist()
    return final_matrix





def print_matrix(matrix: list[list[int]]):
    for row in matrix:
        print("".join(['#' if pixel == 1 else ' ' for pixel in row]))

def commit_to_file(matrix: list[list[int]], year, num_commits_per_day=50):
    day = 1
    month = 1
    calendar.setfirstweekday(calendar.SUNDAY) # github starts week with sunday
    first_week_day = calendar.weekday(year, 1, 1)
    day_offset = 6 - first_week_day
    day += day_offset
    for col in range(len(matrix[0])):
        for row in range(len(matrix)):
            if matrix[row][col] == 1 and (month ==1 and day <= 21):
                for i in range(num_commits_per_day):
                    if month ==1 and day <= 22 and i > 1:
                        continue
                    with open("commit_file.txt", "a") as f:
                        f.write(f"TZ=UTC0 GIT_COMMITTER_DATE=\"{year}-{month:02d}-{day:02d} 03:{i:02d}:00\" git commit -a -m \"{year}-{month:02d}-{day:02d}\" --date {year}-{month:02d}-{day:02d} \n")
                    
                    command = f"TZ=UTC0 GIT_COMMITTER_DATE=\"{year}-{month:02d}-{day:02d} 03:{i:02d}:00\" git commit -a -m \"{year}-{month:02d}-{day:02d}\" --date {year}-{month:02d}-{day:02d}"
                    os.system(command)

            day_max = calendar.monthrange(year, month)[1]
            if day == day_max:
                if month == 12:
                    return
                month += 1
                day = 0
            day += 1

        os.system("git push")

if __name__ == "__main__":
    
    input_text = "ufuk guenes"
    output_matrix = text_to_variable_char_matrix(input_text, 52)
    print(f"Matrix for text: '{input_text}'")
    print_matrix(output_matrix)
    commit_to_file(output_matrix, 2021)
    print("-" * 52)